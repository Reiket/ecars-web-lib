{"version":3,"file":"ButtonWithIcon.test.js","sources":["../../../lib/components/ButtonWithIcon/ButtonWithIcon.test.tsx"],"sourcesContent":["import {cleanup, render, screen} from '@testing-library/react';\nimport {BUTTON_COLOR, BUTTON_SIZE} from '@/components/Button/constants';\nimport {ButtonWithIcon} from '@/components/ButtonWithIcon/ButtonWithIcon';\nimport {Icons} from '@/services/icons';\nimport {LEFT_ICON_BUTTON_TEST_ID, RIGHT_ICON_BUTTON_TEST_ID} from '@/components/ButtonWithIcon/constants';\n\ndescribe('ButtonWithIcon component', () => {\n  afterEach(cleanup);\n  const props = {\n    color: BUTTON_COLOR.GRAY,\n    size: BUTTON_SIZE.BIG,\n  };\n  test('renders component correctly', () => {\n    const {container} = render(<ButtonWithIcon {...props}>Click me</ButtonWithIcon>);\n    expect(screen.getByText('Click me')).toBeInTheDocument();\n    expect(container).toMatchSnapshot();\n  });\n  test('renders LeftIcon when provided', () => {\n    const {container} = render(\n      <ButtonWithIcon\n        LeftIcon={Icons.ArrowNarrowLeft}\n        {...props}\n      >\n        Click\n      </ButtonWithIcon>,\n    );\n    expect(screen.getByTestId(LEFT_ICON_BUTTON_TEST_ID)).toBeInTheDocument();\n    expect(container).toMatchSnapshot();\n  });\n\n  test('renders RightIcon when provided', () => {\n    const {container} = render(\n      <ButtonWithIcon\n        RightIcon={Icons.ArrowNarrowRight}\n        {...props}\n      >\n        Click\n      </ButtonWithIcon>,\n    );\n    expect(screen.getByTestId(RIGHT_ICON_BUTTON_TEST_ID)).toBeInTheDocument();\n    expect(container).toMatchSnapshot();\n  });\n\n  test('renders both LeftIcon and RightIcon when provided', () => {\n    const {container} = render(\n      <ButtonWithIcon\n        LeftIcon={Icons.ArrowNarrowLeft}\n        RightIcon={Icons.ArrowNarrowRight}\n        {...props}\n      >\n        Click\n      </ButtonWithIcon>,\n    );\n    expect(screen.getByTestId(LEFT_ICON_BUTTON_TEST_ID)).toBeInTheDocument();\n    expect(screen.getByTestId(RIGHT_ICON_BUTTON_TEST_ID)).toBeInTheDocument();\n    expect(container).toMatchSnapshot();\n  });\n});\n"],"names":["cleanup","props","BUTTON_COLOR","BUTTON_SIZE","container","render","ButtonWithIcon","screen","jsx","Icons","LEFT_ICON_BUTTON_TEST_ID","RIGHT_ICON_BUTTON_TEST_ID"],"mappings":";;;;;;AAMA,SAAS,4BAA4B,MAAM;AACzC,YAAUA,CAAO;AACjB,QAAMC,IAAQ;AAAA,IACZ,OAAOC,EAAa;AAAA,IACpB,MAAMC,EAAY;AAAA,EACpB;AACA,OAAK,+BAA+B,MAAM;AAClC,UAAA,EAAC,WAAAC,MAAaC,oBAAQC,GAAgB,EAAA,GAAGL,GAAO,UAAA,WAAA,CAAQ,CAAiB;AAC/E,WAAOM,EAAO,UAAU,UAAU,CAAC,EAAE,kBAAkB,GAChD,OAAAH,CAAS,EAAE,gBAAgB;AAAA,EAAA,CACnC,GACD,KAAK,kCAAkC,MAAM;AACrC,UAAA,EAAC,WAAAA,MAAaC;AAAA,MAClB,gBAAAG;AAAA,QAACF;AAAA,QAAA;AAAA,UACC,UAAUG,EAAM;AAAA,UACf,GAAGR;AAAA,UACL,UAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IAGH;AACA,WAAOM,EAAO,YAAYG,CAAwB,CAAC,EAAE,kBAAkB,GAChE,OAAAN,CAAS,EAAE,gBAAgB;AAAA,EAAA,CACnC,GAED,KAAK,mCAAmC,MAAM;AACtC,UAAA,EAAC,WAAAA,MAAaC;AAAA,MAClB,gBAAAG;AAAA,QAACF;AAAA,QAAA;AAAA,UACC,WAAWG,EAAM;AAAA,UAChB,GAAGR;AAAA,UACL,UAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IAGH;AACA,WAAOM,EAAO,YAAYI,CAAyB,CAAC,EAAE,kBAAkB,GACjE,OAAAP,CAAS,EAAE,gBAAgB;AAAA,EAAA,CACnC,GAED,KAAK,qDAAqD,MAAM;AACxD,UAAA,EAAC,WAAAA,MAAaC;AAAA,MAClB,gBAAAG;AAAA,QAACF;AAAA,QAAA;AAAA,UACC,UAAUG,EAAM;AAAA,UAChB,WAAWA,EAAM;AAAA,UAChB,GAAGR;AAAA,UACL,UAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IAGH;AACA,WAAOM,EAAO,YAAYG,CAAwB,CAAC,EAAE,kBAAkB,GACvE,OAAOH,EAAO,YAAYI,CAAyB,CAAC,EAAE,kBAAkB,GACjE,OAAAP,CAAS,EAAE,gBAAgB;AAAA,EAAA,CACnC;AACH,CAAC;"}