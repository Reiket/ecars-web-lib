{"version":3,"file":"Input.test.js","sources":["../../../lib/components/Input/Input.test.tsx"],"sourcesContent":["import {fireEvent, render, screen} from '@testing-library/react';\nimport {Input} from '@/components/Input/Input';\nimport {INPUT_TEST_ID} from '@/components/Input/constants';\n\ndescribe('Input component', () => {\n  const disabledOptions = [true, false];\n  const errorsOptions = [true, false];\n  const placeholderOptions = ['Your email', undefined];\n  disabledOptions.forEach((disabled) => {\n    errorsOptions.forEach((error) => {\n      placeholderOptions.forEach((placeholder) => {\n        const disabledStatus = disabled ? 'is disabled' : 'is not disabled';\n        const hasError = error ? 'has an error and input has an error class' : 'has no error';\n        const hasPlaceholder = placeholder ? 'has a placeholder' : 'has no placeholder';\n        const testName = `should input ${disabledStatus} ${hasError} ${hasPlaceholder}`;\n        test(testName, () => {\n          const props = {\n            disabled: disabled,\n            hasError: error,\n            placeholder: placeholder,\n          };\n          const {container} = render(<Input {...props} />);\n          const inputElement = screen.getByTestId(INPUT_TEST_ID) as HTMLInputElement;\n          if (error) {\n            expect(inputElement).toHaveClass('error');\n          }\n          if (placeholder) {\n            expect(inputElement).toHaveAttribute('placeholder', placeholder);\n          }\n          expect(inputElement).toBeInTheDocument();\n          expect(inputElement.disabled).toBe(disabled);\n          expect(container).toMatchSnapshot();\n        });\n      });\n    });\n  });\n  test('should input has a value which got in props', () => {\n    const props = {\n      value: 'input text',\n    };\n    render(<Input {...props} />);\n    const inputElement = screen.getByTestId(INPUT_TEST_ID);\n    expect(inputElement).toHaveValue(props.value);\n  });\n  test('should onChange event updates value correctly', () => {\n    const mockOnChange = jest.fn();\n    const props = {\n      value: '',\n      onChange: mockOnChange,\n    };\n    render(<Input {...props} />);\n    const inputElement = screen.getByTestId(INPUT_TEST_ID);\n    fireEvent.change(inputElement, {target: {value: 'test'}});\n    expect(mockOnChange).toHaveBeenCalledWith('test');\n  });\n  test('onChange event updates input value correctly when typing', () => {\n    const mockOnChange = jest.fn();\n    const props = {\n      value: '',\n      onChange: mockOnChange,\n    };\n    render(<Input {...props} />);\n    const inputElement = screen.getByTestId(INPUT_TEST_ID);\n    fireEvent.change(inputElement, {target: {value: 't'}});\n    expect(mockOnChange).toHaveBeenCalledWith('t');\n    fireEvent.change(inputElement, {target: {value: 'te'}});\n    expect(mockOnChange).toHaveBeenCalledWith('te');\n    fireEvent.change(inputElement, {target: {value: 'tes'}});\n    expect(mockOnChange).toHaveBeenCalledWith('tes');\n    fireEvent.change(inputElement, {target: {value: 'test'}});\n    expect(mockOnChange).toHaveBeenCalledWith('test');\n  });\n});\n"],"names":["describe","errorsOptions","placeholderOptions","undefined","forEach","disabled","error","placeholder","test","props","hasError","container","render","Input","inputElement","screen","getByTestId","INPUT_TEST_ID","expect","toHaveClass","toHaveAttribute","toBeInTheDocument","toBe","toMatchSnapshot","value","jsx","toHaveValue","mockOnChange","jest","fn","onChange","fireEvent","change","target","toHaveBeenCalledWith"],"mappings":";;;;AAIAA,SAAS,mBAAmB;AACpB,QACAC,IAAgB,CAAC,IAAA,EACjBC,GAAAA,IAAqB,CAAC,cAAcC,MAAAA;AAFlB,GAAC,IAAA,EAGTC,EAAAA,QAASC,CAAAA;AACTJ,IAAAA,EAAAG,QAASE,CAAAA;AACFJ,MAAAA,EAAAE,QAASG,CAAAA;AAK1BC,aADiB,gBAHMH,IAAW,gBAAgB,iBACjCC,IAAAA,IAAQ,8CAA8C,cAChDC,IAAAA,IAAc,sBAAsB,oBAAA,IAE5C,MACb;AAAA,gBAAME,IAAQ,EACZJ,UAAAA,GACAK,UAAUJ,GACVC,aAEII,EAAAA,GAAAA,EAAAA,WAACA,MAAaC,IAAQC,GAAO,EAAGJ,GAAAA,EAAAA,CAAAA,CAAAA,GAChCK,IAAeC,EAAOC,YAAYC,CACpCX;AAAAA,UAAAA,KACKY,OAAAJ,CAAAA,EAAcK,YAAY,OAE/BZ,GAAAA,KACFW,OAAOJ,CAAAA,EAAcM,gBAAgB,eAAeb,IAE/CW,OAAAJ,CAAAA,EAAcO,kBACrBH,GAAAA,OAAOJ,EAAaT,QAAAA,EAAUiB,KAAKjB,CAC5Ba,GAAAA,OAAAP,CAAWY,EAAAA,gBAAAA;AAAAA,QAAgB,CACnC;AAAA,MAAA,CAAA;AAAA,IACF;EACF,CAEHf,GAAAA,KAAK,+CAA+C,MAAA;AAClD,UAAMC,IAAQ,EACZe,OAAO,aAAA;AAETZ,IAAAA,EAAQa,EAAAZ,GAAA,EAAA,GAAUJ;AACZ,UAAAK,IAAeC,EAAOC,YAAYC,CACxCC;AAAAA,WAAOJ,GAAcY,YAAYjB,EAAMe;EAAK,CAE9ChB,GAAAA,KAAK,iDAAiD,MAC9C;AAAA,UAAAmB,IAAeC,KAAKC,GAK1BjB;AAAAA,IAAAA,EAAQa,EAAAZ,GAAA,EAHNW,OAAO,IACPM,UAAUH;AAGN,UAAAb,IAAeC,EAAOC,YAAYC,CAC9Bc;AAAAA,IAAAA,EAAAC,OAAOlB,GAAc,EAACmB,QAAQ,EAACT,OAAO,OAAA,EAAA,CAAA,GACzCN,OAAAS,CAAcO,EAAAA,qBAAqB,MAAM;AAAA,EAAA,CAAA,GAElD1B,KAAK,4DAA4D;AACzD,UAAAmB,IAAeC,KAAKC,GAAAA;AAK1BjB,IAAAA,EAAQa,EAAAZ,GAAA,EAHNW,OAAO,IACPM,UAAUH,EAAAA,CAAAA,CAAAA;AAGN,UAAAb,IAAeC,EAAOC,YAAYC,CAC9Bc;AAAAA,IAAAA,EAAAC,OAAOlB,GAAc,EAACmB,QAAQ,EAACT,OAAO,IAAA,EAAA,CAAA,GACzCN,OAAAS,CAAcO,EAAAA,qBAAqB,GAChCH,GAAAA,EAAAC,OAAOlB,GAAc,EAACmB,QAAQ,EAACT,OAAO,KAAA,EAAA,CAAA,GACzCN,OAAAS,CAAAA,EAAcO,qBAAqB,IAChCH,GAAAA,EAAAC,OAAOlB,GAAc,EAACmB,QAAQ,EAACT,OAAO,MAAA,EAAA,CAAA,GACzCN,OAAAS,CAAAA,EAAcO,qBAAqB,KAAA,GAChCH,EAAAC,OAAOlB,GAAc,EAACmB,QAAQ,EAACT,OAAO,aACzCN,OAAAS,CAAAA,EAAcO,qBAAqB,MAAA;AAAA,EAAM,CACjD;AAAA,CAAA;"}