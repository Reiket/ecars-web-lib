{"version":3,"file":"Input.js","sources":["../../../lib/components/Input/Input.tsx"],"sourcesContent":["import {cn} from '@/services/helpers';\r\nimport {ChangeEvent, FC, HTMLInputTypeAttribute} from 'react';\r\nimport {INPUT_TEST_ID} from '@/components/Input/constants';\r\nimport {ElementProps} from '@/services/types';\r\n\r\ninterface Props extends ElementProps {\r\n  type?: HTMLInputTypeAttribute;\r\n  value?: string;\r\n  onChange?: (value: string) => void;\r\n  name?: string;\r\n  placeholder?: string;\r\n  id?: string;\r\n  disabled?: boolean;\r\n  hasError?: boolean;\r\n}\r\n\r\nexport const Input: FC<Props> = ({\r\n  value,\r\n  onChange,\r\n  hasError,\r\n  placeholder,\r\n  block,\r\n  disabled = false,\r\n  type = 'text',\r\n  id = 'input',\r\n  name = 'input',\r\n}) => {\r\n  const classNames = cn(block, 'input', {\r\n    'error': hasError,\r\n  });\r\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    if (onChange) {\r\n      onChange(event.currentTarget.value);\r\n    }\r\n  };\r\n  return (\r\n    <input\r\n      onChange={handleChange}\r\n      disabled={disabled}\r\n      autoComplete=\"off\"\r\n      data-testid={INPUT_TEST_ID}\r\n      className={classNames}\r\n      id={id}\r\n      name={name}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      type={type}\r\n    />\r\n  );\r\n};\r\n"],"names":["Input","value","onChange","hasError","placeholder","block","disabled","p","type","l","id","m","name","classNames","cn","error","jsx","event","currentTarget","autoComplete","INPUT_TEST_ID","className"],"mappings":";;;AAgBO,MAAMA,IAAmB,CAAA,EAC9BC,OACAC,GAAAA,UAAAA,GACAC,UACAC,GAAAA,aAAAA,GACAC,UACAC,UAAWC,IAAA,IACXC,MAAOC,IAAA,QACPC,IAAKC,IAAA,SACLC,UAAO,QAED,MAAA;AAAA,QAAAC,IAAaC,EAAGT,GAAO,SAAS,EACpCU,OAASZ,EAAAA,CAAAA;AAQT,SAAAa,EAAC,SAAA,EACCd,UAPkBe,CAAAA,MAChBf;AAAAA,IAAAA,KACOA,EAAAe,EAAMC,cAAcjB,KAAAA;AAAAA,EAAK,GAMlCK,UACAa,GAAAA,cAAa,OACb,eAAaC,GACbC,WAAWR,GACXH,IAAAA,GACAE,MACAR,GAAAA,aAAAA,GACAH,OACAO,GAAAA,MAAAA,EAAAA,CAAAA;AACF;"}