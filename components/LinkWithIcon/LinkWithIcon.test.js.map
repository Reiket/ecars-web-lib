{"version":3,"file":"LinkWithIcon.test.js","sources":["../../../lib/components/LinkWithIcon/LinkWithIcon.test.tsx"],"sourcesContent":["import {cleanup, render, screen} from '@testing-library/react';\nimport {LinkWithIcon} from '@/components/LinkWithIcon/LinkWithIcon';\nimport {ROUTER_LINK_COLOR} from '@/components/RouterLink/constants';\nimport {Icons} from '@/services/icons';\nimport {LEFT_ICON_LINK_TEST_ID, RIGHT_ICON_LINK_TEST_ID} from '@/components/LinkWithIcon/constants';\n\ndescribe('LinkWithIcon component', () => {\n  afterEach(cleanup);\n  const props = {\n    color: ROUTER_LINK_COLOR.GRAY,\n    href: '/',\n  };\n  test('renders component correctly', () => {\n    const {container} = render(<LinkWithIcon {...props}>Link</LinkWithIcon>);\n    expect(screen.getByText('Link')).toBeInTheDocument();\n    expect(container).toMatchSnapshot();\n  });\n  test('renders LeftIcon when provided', () => {\n    const {container} = render(\n      <LinkWithIcon\n        LeftIcon={Icons.ArrowNarrowLeft}\n        {...props}\n      >\n        Click\n      </LinkWithIcon>,\n    );\n    expect(screen.getByTestId(LEFT_ICON_LINK_TEST_ID)).toBeInTheDocument();\n    expect(container).toMatchSnapshot();\n  });\n\n  test('renders RightIcon when provided', () => {\n    const {container} = render(\n      <LinkWithIcon\n        RightIcon={Icons.ArrowNarrowRight}\n        {...props}\n      >\n        Click\n      </LinkWithIcon>,\n    );\n    expect(screen.getByTestId(RIGHT_ICON_LINK_TEST_ID)).toBeInTheDocument();\n    expect(container).toMatchSnapshot();\n  });\n\n  test('renders both LeftIcon and RightIcon when provided', () => {\n    const {container} = render(\n      <LinkWithIcon\n        LeftIcon={Icons.ArrowNarrowLeft}\n        RightIcon={Icons.ArrowNarrowRight}\n        {...props}\n      >\n        Click\n      </LinkWithIcon>,\n    );\n    expect(screen.getByTestId(LEFT_ICON_LINK_TEST_ID)).toBeInTheDocument();\n    expect(screen.getByTestId(RIGHT_ICON_LINK_TEST_ID)).toBeInTheDocument();\n    expect(container).toMatchSnapshot();\n  });\n});\n"],"names":["cleanup","props","ROUTER_LINK_COLOR","container","render","LinkWithIcon","screen","jsx","Icons","LEFT_ICON_LINK_TEST_ID","RIGHT_ICON_LINK_TEST_ID"],"mappings":";;;;;;AAMA,SAAS,0BAA0B,MAAM;AACvC,YAAUA,CAAO;AACjB,QAAMC,IAAQ;AAAA,IACZ,OAAOC,EAAkB;AAAA,IACzB,MAAM;AAAA,EACR;AACA,OAAK,+BAA+B,MAAM;AAClC,UAAA,EAAC,WAAAC,MAAaC,oBAAQC,GAAc,EAAA,GAAGJ,GAAO,UAAA,OAAA,CAAI,CAAe;AACvE,WAAOK,EAAO,UAAU,MAAM,CAAC,EAAE,kBAAkB,GAC5C,OAAAH,CAAS,EAAE,gBAAgB;AAAA,EAAA,CACnC,GACD,KAAK,kCAAkC,MAAM;AACrC,UAAA,EAAC,WAAAA,MAAaC;AAAA,MAClB,gBAAAG;AAAA,QAACF;AAAA,QAAA;AAAA,UACC,UAAUG,EAAM;AAAA,UACf,GAAGP;AAAA,UACL,UAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IAGH;AACA,WAAOK,EAAO,YAAYG,CAAsB,CAAC,EAAE,kBAAkB,GAC9D,OAAAN,CAAS,EAAE,gBAAgB;AAAA,EAAA,CACnC,GAED,KAAK,mCAAmC,MAAM;AACtC,UAAA,EAAC,WAAAA,MAAaC;AAAA,MAClB,gBAAAG;AAAA,QAACF;AAAA,QAAA;AAAA,UACC,WAAWG,EAAM;AAAA,UAChB,GAAGP;AAAA,UACL,UAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IAGH;AACA,WAAOK,EAAO,YAAYI,CAAuB,CAAC,EAAE,kBAAkB,GAC/D,OAAAP,CAAS,EAAE,gBAAgB;AAAA,EAAA,CACnC,GAED,KAAK,qDAAqD,MAAM;AACxD,UAAA,EAAC,WAAAA,MAAaC;AAAA,MAClB,gBAAAG;AAAA,QAACF;AAAA,QAAA;AAAA,UACC,UAAUG,EAAM;AAAA,UAChB,WAAWA,EAAM;AAAA,UAChB,GAAGP;AAAA,UACL,UAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IAGH;AACA,WAAOK,EAAO,YAAYG,CAAsB,CAAC,EAAE,kBAAkB,GACrE,OAAOH,EAAO,YAAYI,CAAuB,CAAC,EAAE,kBAAkB,GAC/D,OAAAP,CAAS,EAAE,gBAAgB;AAAA,EAAA,CACnC;AACH,CAAC;"}