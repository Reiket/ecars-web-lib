{"version":3,"file":"SliderNavigate.test.js","sources":["../../../lib/components/SliderNavigate/SliderNavigate.test.tsx"],"sourcesContent":["import {cleanup, render, screen} from '@testing-library/react';\nimport {SliderNavigate} from '@/components/SliderNavigate/SliderNavigate';\nimport {\n  NAVIGATE_BUTTON_PLACEMENT,\n  NAVIGATE_BUTTON_TEST_ID,\n  SLIDER_NAVIGATE_TEST_ID,\n} from '@/components/SliderNavigate/constants';\nimport {NavigateButton} from '@/components/SliderNavigate/NavigateButton';\n\ndescribe('Slider Navigate component', () => {\n  afterEach(cleanup);\n  test('renders correctly', () => {\n    const {container} = render(<SliderNavigate />);\n    const sliderNavigateElement = screen.getByTestId(SLIDER_NAVIGATE_TEST_ID);\n    const buttonElements = screen.getAllByTestId(NAVIGATE_BUTTON_TEST_ID);\n    expect(buttonElements.length).toBe(Object.values(NAVIGATE_BUTTON_PLACEMENT).length);\n    expect(sliderNavigateElement).toBeInTheDocument();\n    expect(container).toMatchSnapshot();\n  });\n  test('renders no buttons if NAVIGATE_BUTTON_PLACEMENT is empty', () => {\n    jest.spyOn(Object, 'values').mockReturnValue([]);\n    const {container} = render(<SliderNavigate />);\n    const buttonElements = screen.queryAllByTestId(NAVIGATE_BUTTON_TEST_ID);\n\n    expect(buttonElements.length).toBe(0);\n    expect(container).toMatchSnapshot();\n  });\n});\n\ndescribe('Navigate Button component', () => {\n  const placements = Object.values(NAVIGATE_BUTTON_PLACEMENT);\n  placements.forEach((placement) => {\n    test(`renders correctly with ${placement} placement`, () => {\n      const {container} = render(<NavigateButton placement={placement} />);\n      const buttonElement = screen.getByTestId(NAVIGATE_BUTTON_TEST_ID);\n\n      expect(buttonElement).toBeInTheDocument();\n      expect(buttonElement).toHaveClass('slider-navigate__button');\n      expect(buttonElement.querySelector('svg')).toBeInTheDocument();\n      expect(container).toMatchSnapshot();\n    });\n  });\n});\n"],"names":["cleanup","container","render","jsx","SliderNavigate","sliderNavigateElement","screen","SLIDER_NAVIGATE_TEST_ID","buttonElements","NAVIGATE_BUTTON_TEST_ID","NAVIGATE_BUTTON_PLACEMENT","placement","NavigateButton","buttonElement"],"mappings":";;;;;AASA,SAAS,6BAA6B,MAAM;AAC1C,YAAUA,CAAO,GACjB,KAAK,qBAAqB,MAAM;AAC9B,UAAM,EAAC,WAAAC,EAAS,IAAIC,EAAO,gBAAAC,EAACC,KAAe,CAAE,GACvCC,IAAwBC,EAAO,YAAYC,CAAuB,GAClEC,IAAiBF,EAAO,eAAeG,CAAuB;AAC7D,WAAAD,EAAe,MAAM,EAAE,KAAK,OAAO,OAAOE,CAAyB,EAAE,MAAM,GAC3E,OAAAL,CAAqB,EAAE,kBAAkB,GACzC,OAAAJ,CAAS,EAAE,gBAAgB;AAAA,EAAA,CACnC,GACD,KAAK,4DAA4D,MAAM;AACrE,SAAK,MAAM,QAAQ,QAAQ,EAAE,gBAAgB,CAAA,CAAE;AAC/C,UAAM,EAAC,WAAAA,EAAS,IAAIC,EAAO,gBAAAC,EAACC,KAAe,CAAE,GACvCI,IAAiBF,EAAO,iBAAiBG,CAAuB;AAEtE,WAAOD,EAAe,MAAM,EAAE,KAAK,CAAC,GAC7B,OAAAP,CAAS,EAAE,gBAAgB;AAAA,EAAA,CACnC;AACH,CAAC;AAED,SAAS,6BAA6B,MAAM;AAE/B,EADQ,OAAO,OAAOS,CAAyB,EAC/C,QAAQ,CAACC,MAAc;AAC3B,SAAA,0BAA0BA,CAAS,cAAc,MAAM;AAC1D,YAAM,EAAC,WAAAV,EAAS,IAAIC,EAAQ,gBAAAC,EAAAS,GAAA,EAAe,WAAAD,GAAsB,CAAE,GAC7DE,IAAgBP,EAAO,YAAYG,CAAuB;AAEzD,aAAAI,CAAa,EAAE,kBAAkB,GACjC,OAAAA,CAAa,EAAE,YAAY,yBAAyB,GAC3D,OAAOA,EAAc,cAAc,KAAK,CAAC,EAAE,kBAAkB,GACtD,OAAAZ,CAAS,EAAE,gBAAgB;AAAA,IAAA,CACnC;AAAA,EAAA,CACF;AACH,CAAC;"}