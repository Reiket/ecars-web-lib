{"version":3,"file":"Button.test.js","sources":["../../../lib/components/Button/Button.test.tsx"],"sourcesContent":["import {cleanup, fireEvent, render, screen} from '@testing-library/react';\nimport type {ButtonAttributesType} from '@/components/Button/constants';\nimport {BUTTON_COLOR, BUTTON_SIZE, BUTTON_TEST_ID} from '@/components/Button/constants';\nimport {Button} from '@/components/Button/Button';\n\ndescribe('Button component', () => {\n  afterEach(cleanup);\n\n  const colors = Object.values(BUTTON_COLOR);\n  const sizes = Object.values(BUTTON_SIZE);\n  const types: ButtonAttributesType[] = ['submit', 'reset', 'button'];\n  const props = {\n    color: BUTTON_COLOR.GRAY,\n    size: BUTTON_SIZE.BIG,\n  };\n  const disabledOptions = [true, false];\n\n  colors.forEach((color) => {\n    sizes.forEach((size) => {\n      types.forEach((type) => {\n        disabledOptions.forEach((disabled) => {\n          const testName = `renders button with color ${color}, size ${size}, type ${type ?? 'button'} and disabled`;\n          test(testName, () => {\n            const {container} = render(\n              <Button\n                color={color}\n                size={size}\n                type={type}\n                disabled={disabled}\n              >\n                button\n              </Button>,\n            );\n            const buttonElement: HTMLButtonElement = screen.getByTestId(BUTTON_TEST_ID);\n            expect(buttonElement).toBeInTheDocument();\n            expect(buttonElement).toHaveClass(`button--${color}`);\n            expect(buttonElement).toHaveClass(`button--${size}`);\n            expect(buttonElement.disabled).toBe(disabled);\n            expect(buttonElement).toHaveStyle('cursor: default');\n            expect(container).toMatchSnapshot();\n          });\n        });\n      });\n    });\n  });\n\n  test('changes button text according to the children text', () => {\n    const {container, getByText, rerender} = render(<Button {...props}>button</Button>);\n    let button = getByText('button');\n    expect(button).toBeInTheDocument();\n\n    rerender(<Button {...props}>Confirm</Button>);\n    button = getByText('Confirm');\n    expect(button).toBeInTheDocument();\n    expect(container).toMatchSnapshot();\n  });\n\n  test('handles the click event', () => {\n    const onClick = jest.fn();\n    const {container, getByText} = render(\n      <Button\n        {...props}\n        onClick={onClick}\n      >\n        button\n      </Button>,\n    );\n    fireEvent.click(getByText('button'));\n    expect(onClick).toHaveBeenCalledTimes(1);\n    expect(container).toMatchSnapshot();\n  });\n\n  test('the onClick event does not fire when button is disabled', () => {\n    const onClick = jest.fn();\n    const {container, getByText} = render(\n      <Button\n        {...props}\n        disabled\n        onClick={onClick}\n      >\n        button\n      </Button>,\n    );\n    const button = getByText('button');\n    fireEvent.click(button);\n    expect(onClick).not.toHaveBeenCalled();\n    expect(container).toMatchSnapshot();\n  });\n\n  test('additional classes are not applied if the button is disabled', () => {\n    const {container, getByText} = render(\n      <Button\n        {...props}\n        disabled\n      >\n        button\n      </Button>,\n    );\n    const button = getByText('button');\n    expect(button).toHaveClass('button');\n    expect(container).toMatchSnapshot();\n  });\n\n  test('button has button-transparent if receive prop isTransparent', () => {\n    const {container} = render(\n      <Button\n        {...props}\n        isTransparent\n      >\n        button\n      </Button>,\n    );\n    const button = screen.getByTestId(BUTTON_TEST_ID);\n    expect(button).toHaveClass('button--transparent');\n    expect(container).toMatchSnapshot();\n  });\n\n  test('button has button-icon if receive prop withIcon', () => {\n    const {container} = render(\n      <Button\n        {...props}\n        withIcon\n      >\n        button\n      </Button>,\n    );\n    const button = screen.getByTestId(BUTTON_TEST_ID);\n    expect(button).toHaveClass('button--icon');\n    expect(container).toMatchSnapshot();\n  });\n});\n"],"names":["describe","afterEach","cleanup","colors","Object","values","BUTTON_COLOR","sizes","BUTTON_SIZE","types","props","color","GRAY","size","BIG","disabledOptions","forEach","type","disabled","test","container","render","jsx","Button","children","buttonElement","screen","getByTestId","BUTTON_TEST_ID","expect","toBeInTheDocument","toHaveClass","toBe","toHaveStyle","toMatchSnapshot","getByText","rerender","button","onClick","jest","fn","fireEvent","click","toHaveBeenCalledTimes","not","toHaveBeenCalled","isTransparent","withIcon"],"mappings":"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"}