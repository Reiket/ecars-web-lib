{"version":3,"file":"LinkWithIcon.test.js","sources":["../../../lib/components/LinkWithIcon/LinkWithIcon.test.tsx"],"sourcesContent":["import {cleanup, render, screen} from '@testing-library/react';\nimport {LinkWithIcon} from '@/components/LinkWithIcon/LinkWithIcon';\nimport {ROUTER_LINK_COLOR} from '@/components/RouterLink/constants';\nimport {Icons} from '@/services/icons';\nimport {LEFT_ICON_LINK_TEST_ID, RIGHT_ICON_LINK_TEST_ID} from '@/components/LinkWithIcon/constants';\n\ndescribe('LinkWithIcon component', () => {\n  afterEach(cleanup);\n  const props = {\n    color: ROUTER_LINK_COLOR.GRAY,\n    href: '/',\n  };\n  test('renders component correctly', () => {\n    const {container} = render(<LinkWithIcon {...props}>Link</LinkWithIcon>);\n    expect(screen.getByText('Link')).toBeInTheDocument();\n    expect(container).toMatchSnapshot();\n  });\n  test('renders LeftIcon when provided', () => {\n    const {container} = render(\n      <LinkWithIcon\n        LeftIcon={Icons.ArrowNarrowLeft}\n        {...props}\n      >\n        Click\n      </LinkWithIcon>,\n    );\n    expect(screen.getByTestId(LEFT_ICON_LINK_TEST_ID)).toBeInTheDocument();\n    expect(container).toMatchSnapshot();\n  });\n\n  test('renders RightIcon when provided', () => {\n    const {container} = render(\n      <LinkWithIcon\n        RightIcon={Icons.ArrowNarrowRight}\n        {...props}\n      >\n        Click\n      </LinkWithIcon>,\n    );\n    expect(screen.getByTestId(RIGHT_ICON_LINK_TEST_ID)).toBeInTheDocument();\n    expect(container).toMatchSnapshot();\n  });\n\n  test('renders both LeftIcon and RightIcon when provided', () => {\n    const {container} = render(\n      <LinkWithIcon\n        LeftIcon={Icons.ArrowNarrowLeft}\n        RightIcon={Icons.ArrowNarrowRight}\n        {...props}\n      >\n        Click\n      </LinkWithIcon>,\n    );\n    expect(screen.getByTestId(LEFT_ICON_LINK_TEST_ID)).toBeInTheDocument();\n    expect(screen.getByTestId(RIGHT_ICON_LINK_TEST_ID)).toBeInTheDocument();\n    expect(container).toMatchSnapshot();\n  });\n});\n"],"names":["describe","afterEach","cleanup","props","color","ROUTER_LINK_COLOR","GRAY","href","test","container","render","LinkWithIcon","children","expect","screen","getByText","toBeInTheDocument","toMatchSnapshot","jsx","LeftIcon","Icons","ArrowNarrowLeft","getByTestId","LEFT_ICON_LINK_TEST_ID","RightIcon","ArrowNarrowRight","RIGHT_ICON_LINK_TEST_ID"],"mappings":";;;;;;AAMAA,SAAS,0BAA0B,MACjCC;AAAAA,YAAUC,CACV;AAAA,QAAMC,IAAQ,EACZC,OAAOC,EAAkBC,MACzBC,MAAM,IAERC;AAAAA,OAAK,+BAA+B,MAC5B;AAAA,UAAA,EAAAC,WAACA,EAAAA,IAAaC,IAAQC,GAAc,EAAA,GAAGR,GAAOS,UAAA,OACpDC,CAAAA,CAAAA;AAAAA,WAAOC,EAAOC,UAAU,MAASC,CAAAA,EAAAA,kBAAAA,GAC1BH,OAAAJ,CAAWQ,EAAAA,gBAAAA;AAAAA,EAAgB,CAEpCT,GAAAA,KAAK,kCAAkC,MAAA;AAC/B,UAAAC,EAAAA,WAACA,EAAaC,IAAAA,EAClBQ,EAACP,GAAA,EACCQ,UAAUC,EAAMC,iBAAAA,GACZlB,GACLS,UAAA,QAAA,CAAA,CAAA;AAIHC,WAAOC,EAAOQ,YAAYC,CAAAA,CAAAA,EAAyBP,kBAC5CH,GAAAA,OAAAJ,CAAWQ,EAAAA,gBAAAA;AAAAA,EAAgB,CAGpCT,GAAAA,KAAK,mCAAmC,MAAA;AAChC,UAAAC,EAAAA,WAACA,MAAaC,EAClBQ,EAACP,GAAA,EACCa,WAAWJ,EAAMK,kBACbtB,GAAAA,GACLS,UAAA,QAAA,CAAA,CAAA;AAIHC,WAAOC,EAAOQ,YAAYI,CAAAA,CAAAA,EAA0BV,kBAC7CH,GAAAA,OAAAJ,GAAWQ,gBAAgB;AAAA,EAAA,CAAA,GAGpCT,KAAK,qDAAqD,MAClD;AAAA,UAAA,EAAAC,WAACA,EAAAA,IAAaC,EAClBQ,EAACP,GAAA,EACCQ,UAAUC,EAAMC,iBAChBG,WAAWJ,EAAMK,kBACbtB,GAAAA,GACLS,UAAA,QAAA,CAAA,CAAA;AAIHC,WAAOC,EAAOQ,YAAYC,CAAAA,CAAAA,EAAyBP,kBACnDH,GAAAA,OAAOC,EAAOQ,YAAYI,CAA0BV,CAAAA,EAAAA,kBAAAA,GAC7CH,OAAAJ,CAAAA,EAAWQ;EAAgB,CACnC;AAAA,CAAA;"}