{"version":3,"file":"FieldComponent.test.js","sources":["../../../lib/components/Field/FieldComponent.test.tsx"],"sourcesContent":["import {render, screen} from '@testing-library/react';\r\nimport {Input} from '@/components/Input/Input';\r\nimport {Field, FIELD_LABEL_TEST_ID, FIELD_TEST_ID} from '@/components/Field/constants';\r\nimport {INPUT_TEST_ID} from '@/components/Input/constants';\r\n\r\ndescribe('Field Component', () => {\r\n  const labelOptions = ['Email', undefined];\r\n  const errorOptions = ['Some error', undefined];\r\n  const idOptions = ['email', undefined];\r\n  labelOptions.forEach((label) => {\r\n    errorOptions.forEach((error) => {\r\n      idOptions.forEach((id) => {\r\n        const errorStatus = error ? `with error - ${error}` : 'without error';\r\n        const labelStatus = label ? `with label - ${label}` : 'without label';\r\n        const idStatus = id ? `with id - ${id}` : 'without id';\r\n        const testName = `render field component ${errorStatus}, ${labelStatus}, ${idStatus}`;\r\n        test(testName, () => {\r\n          const {container} = render(\r\n            <Field\r\n              label={label}\r\n              id={id}\r\n              error={error}\r\n            >\r\n              <Input />\r\n            </Field>,\r\n          );\r\n          const fieldElement = screen.getByTestId(FIELD_TEST_ID);\r\n          const fieldLabelElement = screen.queryByTestId(FIELD_LABEL_TEST_ID);\r\n          const inputElement = screen.getByTestId(INPUT_TEST_ID);\r\n          expect(container).toMatchSnapshot();\r\n          expect(fieldElement).toBeInTheDocument();\r\n          expect(inputElement).toBeInTheDocument();\r\n          if (label) {\r\n            expect(fieldLabelElement).toBeInTheDocument();\r\n            if (id) {\r\n              expect(fieldLabelElement).toHaveAttribute('for', id);\r\n              expect(inputElement).toHaveAttribute('id', id);\r\n            }\r\n          }\r\n          if (error) {\r\n            expect(screen.getByText('Some error')).toBeInTheDocument();\r\n            expect(inputElement).toHaveClass('error');\r\n          }\r\n        });\r\n      });\r\n    });\r\n  });\r\n});\r\n"],"names":["describe","errorOptions","idOptions","undefined","forEach","label","error","id","test","container","render","jsx","Field","children","Input","fieldElement","screen","getByTestId","FIELD_TEST_ID","fieldLabelElement","queryByTestId","FIELD_LABEL_TEST_ID","inputElement","INPUT_TEST_ID","expect","toMatchSnapshot","toBeInTheDocument","toHaveAttribute","getByText","toHaveClass"],"mappings":";;;;;AAKAA,SAAS,mBAAmB,MAAA;AACpB,QACAC,IAAe,CAAC,cAAA,MAChBC,GAAAA,IAAY,CAAC,SAAA,MAFE;AAAA,GAAC,SAASC,MAAAA,EAGlBC,QAASC,CAAAA,MACPJ;AAAAA,IAAAA,EAAAG,QAASE,CAAAA,MAAAA;AACVJ,MAAAA,EAAAE,QAASG,CAAAA,MAKjBC;AAAAA,aADiB,0BAHGF,IAAQ,gBAAgBA,CAAAA,KAAU,eAClCD,KAAAA,IAAQ,gBAAgBA,CAAU,KAAA,eAAA,KACrCE,IAAK,aAAaA,CAAO,KAAA,YAAA,IAE3B,MACP;AAAA,gBAAA,EAAAE,WAACA,EAAAA,IAAaC,EAClBC,EAACC,GAAA,EACCP,UACAE,IACAD,GAAAA,OAAAA,GAEAO,YAACC,GAAM,CAAA,QAGLC,IAAeC,EAAOC,YAAYC,CAAAA,GAClCC,IAAoBH,EAAOI,cAAcC,CACzCC,GAAAA,IAAeN,EAAOC,YAAYM,CACjCC;AAAAA,iBAAAf,CAAWgB,EAAAA,gBAAAA,GACXD,OAAAT,CAAAA,EAAcW,kBACdF,GAAAA,OAAAF,CAAcI,EAAAA,kBAAAA,GACjBrB,MACKmB,OAAAL,CAAAA,EAAmBO,kBACtBnB,GAAAA,MACFiB,OAAOL,CAAAA,EAAmBQ,gBAAgB,OAAOpB,CACjDiB,GAAAA,OAAOF,CAAcK,EAAAA,gBAAgB,MAAMpB,CAAAA,KAG3CD,MACFkB,OAAOR,EAAOY,UAAU,YAAA,CAAA,EAAeF,kBAChCF,GAAAA,OAAAF,CAAcO,EAAAA,YAAY,OAAO;AAAA,QAAA,CAAA;AAAA,MAE3C,CACF;AAAA,IAAA,CAAA;AAAA,EACF,CACF;AAAA,CAAA;"}