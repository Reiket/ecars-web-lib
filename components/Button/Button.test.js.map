{"version":3,"file":"Button.test.js","sources":["../../../lib/components/Button/Button.test.tsx"],"sourcesContent":["import {cleanup, fireEvent, render, screen} from '@testing-library/react';\nimport type {ButtonAttributesType} from '@/components/Button/constants';\nimport {BUTTON_COLOR, BUTTON_SIZE, BUTTON_TEST_ID} from '@/components/Button/constants';\nimport {Button} from '@/components/Button/Button';\n\ndescribe('Button component', () => {\n  afterEach(cleanup);\n\n  const colors = Object.values(BUTTON_COLOR);\n  const sizes = Object.values(BUTTON_SIZE);\n  const types: ButtonAttributesType[] = ['submit', 'reset', 'button'];\n  const props = {\n    color: BUTTON_COLOR.GRAY,\n    size: BUTTON_SIZE.BIG,\n  };\n  const disabledOptions = [true, false];\n\n  colors.forEach((color) => {\n    sizes.forEach((size) => {\n      types.forEach((type) => {\n        disabledOptions.forEach((disabled) => {\n          const testName = `renders button with color ${color}, size ${size}, type ${type ?? 'button'} and disabled`;\n          test(testName, () => {\n            const {container} = render(\n              <Button\n                color={color}\n                size={size}\n                type={type}\n                disabled={disabled}\n              >\n                button\n              </Button>,\n            );\n            const buttonElement: HTMLButtonElement = screen.getByTestId(BUTTON_TEST_ID);\n            expect(buttonElement).toBeInTheDocument();\n            expect(buttonElement).toHaveClass(`button--${color}`);\n            expect(buttonElement).toHaveClass(`button--${size}`);\n            expect(buttonElement.disabled).toBe(disabled);\n            expect(buttonElement).toHaveStyle('cursor: default');\n            expect(container).toMatchSnapshot();\n          });\n        });\n      });\n    });\n  });\n\n  test('changes button text according to the children text', () => {\n    const {container, getByText, rerender} = render(<Button {...props}>button</Button>);\n    let button = getByText('button');\n    expect(button).toBeInTheDocument();\n\n    rerender(<Button {...props}>Confirm</Button>);\n    button = getByText('Confirm');\n    expect(button).toBeInTheDocument();\n    expect(container).toMatchSnapshot();\n  });\n\n  test('handles the click event', () => {\n    const onClick = jest.fn();\n    const {container, getByText} = render(\n      <Button\n        {...props}\n        onClick={onClick}\n      >\n        button\n      </Button>,\n    );\n    fireEvent.click(getByText('button'));\n    expect(onClick).toHaveBeenCalledTimes(1);\n    expect(container).toMatchSnapshot();\n  });\n\n  test('the onClick event does not fire when button is disabled', () => {\n    const onClick = jest.fn();\n    const {container, getByText} = render(\n      <Button\n        {...props}\n        disabled\n        onClick={onClick}\n      >\n        button\n      </Button>,\n    );\n    const button = getByText('button');\n    fireEvent.click(button);\n    expect(onClick).not.toHaveBeenCalled();\n    expect(container).toMatchSnapshot();\n  });\n\n  test('additional classes are not applied if the button is disabled', () => {\n    const {container, getByText} = render(\n      <Button\n        {...props}\n        disabled\n      >\n        button\n      </Button>,\n    );\n    const button = getByText('button');\n    expect(button).toHaveClass('button');\n    expect(container).toMatchSnapshot();\n  });\n\n  test('button has button-transparent if receive prop isTransparent', () => {\n    const {container} = render(\n      <Button\n        {...props}\n        isTransparent\n      >\n        button\n      </Button>,\n    );\n    const button = screen.getByTestId(BUTTON_TEST_ID);\n    expect(button).toHaveClass('button--transparent');\n    expect(container).toMatchSnapshot();\n  });\n\n  test('button has button-icon if receive prop withIcon', () => {\n    const {container} = render(\n      <Button\n        {...props}\n        withIcon\n      >\n        button\n      </Button>,\n    );\n    const button = screen.getByTestId(BUTTON_TEST_ID);\n    expect(button).toHaveClass('button--icon');\n    expect(container).toMatchSnapshot();\n  });\n});\n"],"names":["cleanup","colors","BUTTON_COLOR","sizes","BUTTON_SIZE","types","props","disabledOptions","color","size","type","disabled","testName","container","render","jsx","Button","buttonElement","screen","BUTTON_TEST_ID","getByText","rerender","button","onClick","fireEvent"],"mappings":"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"}