{"version":3,"file":"FieldComponent.test.js","sources":["../../../lib/components/Field/FieldComponent.test.tsx"],"sourcesContent":["import {render, screen} from '@testing-library/react';\nimport {Input} from '@/components/Input/Input';\nimport {Field, FIELD_LABEL_TEST_ID, FIELD_TEST_ID} from '@/components/Field/constants';\nimport {INPUT_TEST_ID} from '@/components/Input/constants';\n\ndescribe('Field Component', () => {\n  const labelOptions = ['Email', undefined];\n  const errorOptions = ['Some error', undefined];\n  const idOptions = ['email', undefined];\n  labelOptions.forEach((label) => {\n    errorOptions.forEach((error) => {\n      idOptions.forEach((id) => {\n        const errorStatus = error ? `with error - ${error}` : 'without error';\n        const labelStatus = label ? `with label - ${label}` : 'without label';\n        const idStatus = id ? `with id - ${id}` : 'without id';\n        const testName = `render field component ${errorStatus}, ${labelStatus}, ${idStatus}`;\n        test(testName, () => {\n          const {container} = render(\n            <Field\n              label={label}\n              id={id}\n              error={error}\n            >\n              <Input />\n            </Field>,\n          );\n          const fieldElement = screen.getByTestId(FIELD_TEST_ID);\n          const fieldLabelElement = screen.queryByTestId(FIELD_LABEL_TEST_ID);\n          const inputElement = screen.getByTestId(INPUT_TEST_ID);\n          expect(container).toMatchSnapshot();\n          expect(fieldElement).toBeInTheDocument();\n          expect(inputElement).toBeInTheDocument();\n          if (label) {\n            expect(fieldLabelElement).toBeInTheDocument();\n            if (id) {\n              expect(fieldLabelElement).toHaveAttribute('for', id);\n              expect(inputElement).toHaveAttribute('id', id);\n            }\n          }\n          if (error) {\n            expect(screen.getByText('Some error')).toBeInTheDocument();\n            expect(inputElement).toHaveClass('error');\n          }\n        });\n      });\n    });\n  });\n});\n"],"names":["describe","errorOptions","idOptions","forEach","label","error","id","test","container","render","jsx","Field","children","Input","fieldElement","screen","getByTestId","FIELD_TEST_ID","fieldLabelElement","queryByTestId","FIELD_LABEL_TEST_ID","inputElement","INPUT_TEST_ID","expect","toMatchSnapshot","toBeInTheDocument","toHaveAttribute","getByText","toHaveClass"],"mappings":";;;;;AAKAA,SAAS,mBAAmB,MAAA;AACpB,QACAC,IAAe,CAAC,cAAA,MAChBC,GAAAA,IAAY,CAAC,SAAA,MAFE;AAAA,GAAC,SAAS,MAAA,EAGlBC,QAASC,CAAAA,MACPH;AAAAA,IAAAA,EAAAE,QAASE,CAAAA,MAAAA;AACVH,MAAAA,EAAAC,QAASG,CAAAA,MAKjBC;AAAAA,aADiB,0BAHGF,IAAQ,gBAAgBA,CAAAA,KAAU,eAClCD,KAAAA,IAAQ,gBAAgBA,CAAU,KAAA,eAAA,KACrCE,IAAK,aAAaA,CAAO,KAAA,YAAA,IAE3B,MACP;AAAA,gBAAA,EAAAE,WAACA,EAAAA,IAAaC,EAClBC,EAACC,GAAA,EACCP,UACAE,IACAD,GAAAA,OAAAA,GAEAO,YAACC,GAAM,CAAA,QAGLC,IAAeC,EAAOC,YAAYC,CAAAA,GAClCC,IAAoBH,EAAOI,cAAcC,CACzCC,GAAAA,IAAeN,EAAOC,YAAYM,CACjCC;AAAAA,iBAAAf,CAAWgB,EAAAA,gBAAAA,GACXD,OAAAT,CAAAA,EAAcW,kBACdF,GAAAA,OAAAF,CAAcI,EAAAA,kBAAAA,GACjBrB,MACKmB,OAAAL,CAAAA,EAAmBO,kBACtBnB,GAAAA,MACFiB,OAAOL,CAAAA,EAAmBQ,gBAAgB,OAAOpB,CACjDiB,GAAAA,OAAOF,CAAcK,EAAAA,gBAAgB,MAAMpB,CAAAA,KAG3CD,MACFkB,OAAOR,EAAOY,UAAU,YAAA,CAAA,EAAeF,kBAChCF,GAAAA,OAAAF,CAAcO,EAAAA,YAAY,OAAO;AAAA,QAAA,CAAA;AAAA,MAE3C,CACF;AAAA,IAAA,CAAA;AAAA,EACF,CACF;AAAA,CAAA;"}