{"version":3,"file":"withBlockClass.js","sources":["../../../lib/services/hoc/withBlockClass.tsx"],"sourcesContent":["import type {ComponentType, FC, ReactElement} from 'react';\nimport React, {cloneElement} from 'react';\nimport IntrinsicElements = React.JSX.IntrinsicElements;\n\ninterface WithBlockProps {\n  block: string;\n  children: ReactElement | ReactElement[];\n}\n\nexport const withBlockClass =\n  <P extends object>(Tag: ComponentType<P> | keyof IntrinsicElements, className: string): FC<P & WithBlockProps> =>\n  ({block, children, ...props}) => {\n    const clonedChildren = Array.isArray(children)\n      ? children.map((child, index) =>\n          cloneElement(child, {\n            block,\n            key: `${block} - ${index.toString()}`,\n          }),\n        )\n      : cloneElement(children, {block});\n\n    return (\n      <Tag\n        className={className}\n        {...(props as P)}\n      >\n        {clonedChildren}\n      </Tag>\n    );\n  };\n"],"names":["withBlockClass","Tag","className","block","children","props","clonedChildren","child","index","cloneElement","jsx"],"mappings":";;AASa,MAAAA,IACX,CAAmBC,GAAiDC,MACpE,CAAC,EAAC,OAAAC,GAAO,UAAAC,GAAU,GAAGC,QAAW;AAC/B,QAAMC,IAAiB,MAAM,QAAQF,CAAQ,IACzCA,EAAS;AAAA,IAAI,CAACG,GAAOC,MACnBC,EAAaF,GAAO;AAAA,MAClB,OAAAJ;AAAA,MACA,KAAK,GAAGA,CAAK,MAAMK,EAAM,UAAU;AAAA,IACpC,CAAA;AAAA,EAEH,IAAAC,EAAaL,GAAU,EAAC,OAAAD,GAAM;AAGhC,SAAA,gBAAAO;AAAA,IAACT;AAAA,IAAA;AAAA,MACC,WAAAC;AAAA,MACC,GAAIG;AAAA,MAEJ,UAAAC;AAAA,IAAA;AAAA,EACH;AAEJ;"}