{"version":3,"file":"ButtonWithIcon.test.js","sources":["../../../lib/components/ButtonWithIcon/ButtonWithIcon.test.tsx"],"sourcesContent":["import {cleanup, render, screen} from '@testing-library/react';\r\nimport {BUTTON_COLOR, BUTTON_SIZE} from '@/components/Button/constants';\r\nimport {ButtonWithIcon} from '@/components/ButtonWithIcon/ButtonWithIcon';\r\nimport {Icons} from '@/services/icons';\r\nimport {LEFT_ICON_BUTTON_TEST_ID, RIGHT_ICON_BUTTON_TEST_ID} from '@/components/ButtonWithIcon/constants';\r\n\r\ndescribe('ButtonWithIcon component', () => {\r\n  afterEach(cleanup);\r\n  const props = {\r\n    color: BUTTON_COLOR.GRAY,\r\n    size: BUTTON_SIZE.BIG,\r\n  };\r\n  test('renders component correctly', () => {\r\n    const {container} = render(<ButtonWithIcon {...props}>Click me</ButtonWithIcon>);\r\n    expect(screen.getByText('Click me')).toBeInTheDocument();\r\n    expect(container).toMatchSnapshot();\r\n  });\r\n  test('renders LeftIcon when provided', () => {\r\n    const {container} = render(\r\n      <ButtonWithIcon\r\n        LeftIcon={Icons.ArrowNarrowLeft}\r\n        {...props}\r\n      >\r\n        Click\r\n      </ButtonWithIcon>,\r\n    );\r\n    expect(screen.getByTestId(LEFT_ICON_BUTTON_TEST_ID)).toBeInTheDocument();\r\n    expect(container).toMatchSnapshot();\r\n  });\r\n\r\n  test('renders RightIcon when provided', () => {\r\n    const {container} = render(\r\n      <ButtonWithIcon\r\n        RightIcon={Icons.ArrowNarrowRight}\r\n        {...props}\r\n      >\r\n        Click\r\n      </ButtonWithIcon>,\r\n    );\r\n    expect(screen.getByTestId(RIGHT_ICON_BUTTON_TEST_ID)).toBeInTheDocument();\r\n    expect(container).toMatchSnapshot();\r\n  });\r\n\r\n  test('renders both LeftIcon and RightIcon when provided', () => {\r\n    const {container} = render(\r\n      <ButtonWithIcon\r\n        LeftIcon={Icons.ArrowNarrowLeft}\r\n        RightIcon={Icons.ArrowNarrowRight}\r\n        {...props}\r\n      >\r\n        Click\r\n      </ButtonWithIcon>,\r\n    );\r\n    expect(screen.getByTestId(LEFT_ICON_BUTTON_TEST_ID)).toBeInTheDocument();\r\n    expect(screen.getByTestId(RIGHT_ICON_BUTTON_TEST_ID)).toBeInTheDocument();\r\n    expect(container).toMatchSnapshot();\r\n  });\r\n});\r\n"],"names":["describe","afterEach","cleanup","props","color","BUTTON_COLOR","GRAY","size","BUTTON_SIZE","BIG","test","container","render","ButtonWithIcon","children","expect","screen","getByText","toBeInTheDocument","toMatchSnapshot","jsx","LeftIcon","Icons","ArrowNarrowLeft","getByTestId","LEFT_ICON_BUTTON_TEST_ID","RightIcon","ArrowNarrowRight","RIGHT_ICON_BUTTON_TEST_ID"],"mappings":";;;;;;AAMAA,SAAS,4BAA4B,MACnCC;AAAAA,YAAUC,CACV;AAAA,QAAMC,IAAQ,EACZC,OAAOC,EAAaC,MACpBC,MAAMC,EAAYC,IAAAA;AAEpBC,OAAK,+BAA+B,MAAA;AAC5B,UAAAC,EAAAA,WAACA,EAAaC,IAAAA,IAAQC,GAAgB,EAAGV,GAAAA,GAAOW,UAAA,WAAA,CAAA,CAAA;AACtDC,WAAOC,EAAOC,UAAU,UAAA,CAAA,EAAaC,qBAC9BH,OAAAJ,CAAAA,EAAWQ,gBAAgB;AAAA,EAAA,CAAA,GAEpCT,KAAK,kCAAkC,MAC/B;AAAA,UAAA,EAAAC,WAACA,EAAAA,IAAaC,EAClBQ,EAACP,GAAA,EACCQ,UAAUC,EAAMC,oBACZpB,GACLW,UAAA,QAIHC,CAAAA,CAAAA;AAAAA,WAAOC,EAAOQ,YAAYC,CAA2BP,CAAAA,EAAAA,kBAAAA,GAC9CH,OAAAJ,CAAAA,EAAWQ,gBAAgB;AAAA,EAAA,CAAA,GAGpCT,KAAK,mCAAmC,MAChC;AAAA,UAAA,EAAAC,WAACA,EAAaC,IAAAA,EAClBQ,EAACP,GAAA,EACCa,WAAWJ,EAAMK,kBAAAA,GACbxB,GACLW,UAAA,QAIHC,CAAAA,CAAAA;AAAAA,WAAOC,EAAOQ,YAAYI,CAA4BV,CAAAA,EAAAA,kBAAAA,GAC/CH,OAAAJ,CAAWQ,EAAAA,gBAAAA;AAAAA,EAAgB,CAGpCT,GAAAA,KAAK,qDAAqD,MAAA;AAClD,UAAAC,EAAAA,WAACA,EAAaC,IAAAA,EAClBQ,EAACP,GAAA,EACCQ,UAAUC,EAAMC,iBAChBG,WAAWJ,EAAMK,kBAAAA,GACbxB,GACLW,UAAA,QAIHC,CAAAA,CAAAA;AAAAA,WAAOC,EAAOQ,YAAYC,IAA2BP,kBACrDH,GAAAA,OAAOC,EAAOQ,YAAYI,CAA4BV,CAAAA,EAAAA,kBAAAA,GAC/CH,OAAAJ,CAAAA,EAAWQ;EAAgB,CACnC;AAAA,CAAA;"}