@use "sass:math";
@use "../settings" as s;

@mixin buttonSize($paddingTB, $paddingRL, $size, $lineHeight: 24) {
  padding: s.rem($paddingTB) s.rem($paddingRL);
  font-size: s.rem($size);
  line-height: math.div($lineHeight, $size);
}

@mixin buttonStyle($background, $color, $hover-background, $hover-color) {
  background: s.get-color(s.$buttonColors, $background);
  color: s.get-color(s.$buttonColors, $color);
  &::after {
    background-color: s.get-color(s.$buttonColors, $hover-background);
  }
  &:active {
    background-color: s.get-color(s.$buttonColors, $hover-background);
  }
}

.button {
  font-weight: 600;
  display: inline-block;
  border-radius: s.rem(8);
  position: relative;
  transition: all 0.5s ease 0s;
  z-index: 1;
  overflow: hidden;
  &__close {
    color: s.get-color(s.$buttonColors, "filter-close");
  }
  &:not(&:disabled) {
    &:after {
      position: absolute;
      content: "";
      width: 0;
      height: 100%;
      top: 0;
      right: 0;
      z-index: -1;
      border-radius: s.rem(8);
      transition: all 0.5s ease;
    }
    @media (any-hover: hover) {
      &:hover {
        &::after {
          left: 0;
          width: 100%;
        }
      }
    }
  }
  &--green {
    @include buttonStyle("green", "white", "hover-green", "green");
  }

  &--white {
    @include buttonStyle("white", "green", "hover-white", "white");
  }

  &--gray {
    @include buttonStyle("gray", "gray-color", "hover-gray", "gray");
  }
  &--big {
    @include buttonSize(12, 25, 16);
  }
  &--medium {
    @include buttonSize(6, 12.8, 14);
  }
  &--small {
    @include buttonSize(2, 7, 12, 16);
  }
  &:disabled {
    cursor: default;
    opacity: 40%;
  }
  &--transparent {
    @media (any-hover: hover) {
      background: transparent;
    }
  }
  &--icon {
    display: flex;
    align-items: center;
    > svg {
      transition: transform 0.3s linear;
      font-size: s.rem(20);
    }
    &._rotate {
      svg {
        transform: scale(-1, 1);
      }
    }
  }
}
