{"version":3,"file":"Input.test.js","sources":["../../../lib/components/Input/Input.test.tsx"],"sourcesContent":["import {fireEvent, render, screen} from '@testing-library/react';\nimport {Input} from '@/components/Input/Input';\nimport {INPUT_TEST_ID} from '@/components/Input/constants';\n\ndescribe('Input component', () => {\n  const disabledOptions = [true, false];\n  const errorsOptions = [true, false];\n  const placeholderOptions = ['Your email', undefined];\n  disabledOptions.forEach((disabled) => {\n    errorsOptions.forEach((error) => {\n      placeholderOptions.forEach((placeholder) => {\n        const disabledStatus = disabled ? 'is disabled' : 'is not disabled';\n        const hasError = error ? 'has an error and input has an error class' : 'has no error';\n        const hasPlaceholder = placeholder ? 'has a placeholder' : 'has no placeholder';\n        const testName = `should input ${disabledStatus} ${hasError} ${hasPlaceholder}`;\n        test(testName, () => {\n          const props = {\n            disabled: disabled,\n            hasError: error,\n            placeholder: placeholder,\n          };\n          const {container} = render(<Input {...props} />);\n          const inputElement: HTMLInputElement = screen.getByTestId(INPUT_TEST_ID);\n          if (error) {\n            expect(inputElement).toHaveClass('error');\n          }\n          if (placeholder) {\n            expect(inputElement).toHaveAttribute('placeholder', placeholder);\n          }\n          expect(inputElement).toBeInTheDocument();\n          expect(inputElement.disabled).toBe(disabled);\n          expect(container).toMatchSnapshot();\n        });\n      });\n    });\n  });\n  test('should input has a value which got in props', () => {\n    const props = {\n      value: 'input text',\n    };\n    render(<Input {...props} />);\n    const inputElement = screen.getByTestId(INPUT_TEST_ID);\n    expect(inputElement).toHaveValue(props.value);\n  });\n  test('should onChange event updates value correctly', () => {\n    const mockOnChange = jest.fn();\n    const props = {\n      value: '',\n      onChange: mockOnChange,\n    };\n    render(<Input {...props} />);\n    const inputElement = screen.getByTestId(INPUT_TEST_ID);\n    fireEvent.change(inputElement, {target: {value: 'test'}});\n    expect(mockOnChange).toHaveBeenCalledWith('test');\n  });\n  test('onChange event updates input value correctly when typing', () => {\n    const mockOnChange = jest.fn();\n    const props = {\n      value: '',\n      onChange: mockOnChange,\n    };\n    render(<Input {...props} />);\n    const inputElement = screen.getByTestId(INPUT_TEST_ID);\n    fireEvent.change(inputElement, {target: {value: 't'}});\n    expect(mockOnChange).toHaveBeenCalledWith('t');\n    fireEvent.change(inputElement, {target: {value: 'te'}});\n    expect(mockOnChange).toHaveBeenCalledWith('te');\n    fireEvent.change(inputElement, {target: {value: 'tes'}});\n    expect(mockOnChange).toHaveBeenCalledWith('tes');\n    fireEvent.change(inputElement, {target: {value: 'test'}});\n    expect(mockOnChange).toHaveBeenCalledWith('test');\n  });\n});\n"],"names":["disabledOptions","errorsOptions","placeholderOptions","disabled","error","placeholder","testName","props","container","render","Input","inputElement","screen","INPUT_TEST_ID","jsx","mockOnChange","fireEvent"],"mappings":";;;;AAIA,SAAS,mBAAmB,MAAM;AAC1B,QAAAA,IAAkB,CAAC,IAAM,EAAK,GAC9BC,IAAgB,CAAC,IAAM,EAAK,GAC5BC,IAAqB,CAAC,cAAc,MAAS;AACnC,EAAAF,EAAA,QAAQ,CAACG,MAAa;AACtB,IAAAF,EAAA,QAAQ,CAACG,MAAU;AACZ,MAAAF,EAAA,QAAQ,CAACG,MAAgB;AAI1C,cAAMC,IAAW,gBAHMH,IAAW,gBAAgB,iBAGH,IAF9BC,IAAQ,8CAA8C,cAEZ,IADpCC,IAAc,sBAAsB,oBACkB;AAC7E,aAAKC,GAAU,MAAM;AACnB,gBAAMC,IAAQ;AAAA,YACZ,UAAAJ;AAAA,YACA,UAAUC;AAAA,YACV,aAAAC;AAAA,UACF,GACM,EAAC,WAAAG,EAAa,IAAAC,oBAAQC,GAAO,EAAA,GAAGH,GAAO,CAAE,GACzCI,IAAiCC,EAAO,YAAYC,CAAa;AACvE,UAAIT,KACK,OAAAO,CAAY,EAAE,YAAY,OAAO,GAEtCN,KACF,OAAOM,CAAY,EAAE,gBAAgB,eAAeN,CAAW,GAE1D,OAAAM,CAAY,EAAE,kBAAkB,GACvC,OAAOA,EAAa,QAAQ,EAAE,KAAKR,CAAQ,GACpC,OAAAK,CAAS,EAAE,gBAAgB;AAAA,QAAA,CACnC;AAAA,MAAA,CACF;AAAA,IAAA,CACF;AAAA,EAAA,CACF,GACD,KAAK,+CAA+C,MAAM;AACxD,UAAMD,IAAQ;AAAA,MACZ,OAAO;AAAA,IACT;AACA,IAAAE,EAAQ,gBAAAK,EAAAJ,GAAA,EAAO,GAAGH,EAAO,CAAA,CAAE;AACrB,UAAAI,IAAeC,EAAO,YAAYC,CAAa;AACrD,WAAOF,CAAY,EAAE,YAAYJ,EAAM,KAAK;AAAA,EAAA,CAC7C,GACD,KAAK,iDAAiD,MAAM;AACpD,UAAAQ,IAAe,KAAK,GAAG;AAK7B,IAAAN,EAAQ,gBAAAK,EAAAJ,GAAA,EAAO,GAJD;AAAA,MACZ,OAAO;AAAA,MACP,UAAUK;AAAA,IACZ,EACyB,CAAA,CAAE;AACrB,UAAAJ,IAAeC,EAAO,YAAYC,CAAa;AAC3C,IAAAG,EAAA,OAAOL,GAAc,EAAC,QAAQ,EAAC,OAAO,OAAA,GAAQ,GACjD,OAAAI,CAAY,EAAE,qBAAqB,MAAM;AAAA,EAAA,CACjD,GACD,KAAK,4DAA4D,MAAM;AAC/D,UAAAA,IAAe,KAAK,GAAG;AAK7B,IAAAN,EAAQ,gBAAAK,EAAAJ,GAAA,EAAO,GAJD;AAAA,MACZ,OAAO;AAAA,MACP,UAAUK;AAAA,IACZ,EACyB,CAAA,CAAE;AACrB,UAAAJ,IAAeC,EAAO,YAAYC,CAAa;AAC3C,IAAAG,EAAA,OAAOL,GAAc,EAAC,QAAQ,EAAC,OAAO,IAAA,GAAK,GAC9C,OAAAI,CAAY,EAAE,qBAAqB,GAAG,GACnCC,EAAA,OAAOL,GAAc,EAAC,QAAQ,EAAC,OAAO,KAAA,GAAM,GAC/C,OAAAI,CAAY,EAAE,qBAAqB,IAAI,GACpCC,EAAA,OAAOL,GAAc,EAAC,QAAQ,EAAC,OAAO,MAAA,GAAO,GAChD,OAAAI,CAAY,EAAE,qBAAqB,KAAK,GACrCC,EAAA,OAAOL,GAAc,EAAC,QAAQ,EAAC,OAAO,OAAA,GAAQ,GACjD,OAAAI,CAAY,EAAE,qBAAqB,MAAM;AAAA,EAAA,CACjD;AACH,CAAC;"}