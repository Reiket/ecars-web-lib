{"version":3,"file":"FieldComponent.test.js","sources":["../../../lib/components/Field/FieldComponent.test.tsx"],"sourcesContent":["import {render, screen} from '@testing-library/react';\nimport {Input} from '@/components/Input/Input';\nimport {Field, FIELD_LABEL_TEST_ID, FIELD_TEST_ID} from '@/components/Field/constants';\nimport {INPUT_TEST_ID} from '@/components/Input/constants';\n\ndescribe('Field Component', () => {\n  const labelOptions = ['Email', undefined];\n  const errorOptions = ['Some error', undefined];\n  const idOptions = ['email', undefined];\n  labelOptions.forEach((label) => {\n    errorOptions.forEach((error) => {\n      idOptions.forEach((id) => {\n        const errorStatus = error ? `with error - ${error}` : 'without error';\n        const labelStatus = label ? `with label - ${label}` : 'without label';\n        const idStatus = id ? `with id - ${id}` : 'without id';\n        const testName = `render field component ${errorStatus}, ${labelStatus}, ${idStatus}`;\n        test(testName, () => {\n          const {container} = render(\n            <Field\n              label={label}\n              id={id}\n              error={error}\n            >\n              <Input />\n            </Field>,\n          );\n          const fieldElement = screen.getByTestId(FIELD_TEST_ID);\n          const fieldLabelElement = screen.queryByTestId(FIELD_LABEL_TEST_ID);\n          const inputElement = screen.getByTestId(INPUT_TEST_ID);\n          expect(container).toMatchSnapshot();\n          expect(fieldElement).toBeInTheDocument();\n          expect(inputElement).toBeInTheDocument();\n          if (label) {\n            expect(fieldLabelElement).toBeInTheDocument();\n            if (id) {\n              expect(fieldLabelElement).toHaveAttribute('for', id);\n              expect(inputElement).toHaveAttribute('id', id);\n            }\n          }\n          if (error) {\n            expect(screen.getByText('Some error')).toBeInTheDocument();\n            expect(inputElement).toHaveClass('error');\n          }\n        });\n      });\n    });\n  });\n});\n"],"names":["labelOptions","errorOptions","idOptions","label","error","id","errorStatus","labelStatus","idStatus","testName","container","render","jsx","Field","Input","fieldElement","screen","FIELD_TEST_ID","fieldLabelElement","FIELD_LABEL_TEST_ID","inputElement","INPUT_TEST_ID"],"mappings":";;;;;AAKA,SAAS,mBAAmB,MAAM;AAC1B,QAAAA,IAAe,CAAC,SAAS,MAAS,GAClCC,IAAe,CAAC,cAAc,MAAS,GACvCC,IAAY,CAAC,SAAS,MAAS;AACxB,EAAAF,EAAA,QAAQ,CAACG,MAAU;AACjB,IAAAF,EAAA,QAAQ,CAACG,MAAU;AACpB,MAAAF,EAAA,QAAQ,CAACG,MAAO;AACxB,cAAMC,IAAcF,IAAQ,gBAAgBA,CAAK,KAAK,iBAChDG,IAAcJ,IAAQ,gBAAgBA,CAAK,KAAK,iBAChDK,IAAWH,IAAK,aAAaA,CAAE,KAAK,cACpCI,IAAW,0BAA0BH,CAAW,KAAKC,CAAW,KAAKC,CAAQ;AACnF,aAAKC,GAAU,MAAM;AACb,gBAAA,EAAC,WAAAC,MAAaC;AAAA,YAClB,gBAAAC;AAAA,cAACC;AAAA,cAAA;AAAA,gBACC,OAAAV;AAAA,gBACA,IAAAE;AAAA,gBACA,OAAAD;AAAA,gBAEA,4BAACU,GAAM,CAAA,CAAA;AAAA,cAAA;AAAA,YAAA;AAAA,UAEX,GACMC,IAAeC,EAAO,YAAYC,CAAa,GAC/CC,IAAoBF,EAAO,cAAcG,CAAmB,GAC5DC,IAAeJ,EAAO,YAAYK,CAAa;AAC9C,iBAAAX,CAAS,EAAE,gBAAgB,GAC3B,OAAAK,CAAY,EAAE,kBAAkB,GAChC,OAAAK,CAAY,EAAE,kBAAkB,GACnCjB,MACK,OAAAe,CAAiB,EAAE,kBAAkB,GACxCb,MACF,OAAOa,CAAiB,EAAE,gBAAgB,OAAOb,CAAE,GACnD,OAAOe,CAAY,EAAE,gBAAgB,MAAMf,CAAE,KAG7CD,MACF,OAAOY,EAAO,UAAU,YAAY,CAAC,EAAE,kBAAkB,GAClD,OAAAI,CAAY,EAAE,YAAY,OAAO;AAAA,QAC1C,CACD;AAAA,MAAA,CACF;AAAA,IAAA,CACF;AAAA,EAAA,CACF;AACH,CAAC;"}