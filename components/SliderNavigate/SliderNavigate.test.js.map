{"version":3,"file":"SliderNavigate.test.js","sources":["../../../lib/components/SliderNavigate/SliderNavigate.test.tsx"],"sourcesContent":["import {cleanup, render, screen} from '@testing-library/react';\r\nimport {SliderNavigate} from '@/components/SliderNavigate/SliderNavigate';\r\nimport {\r\n  NAVIGATE_BUTTON_PLACEMENT,\r\n  NAVIGATE_BUTTON_TEST_ID,\r\n  SLIDER_NAVIGATE_TEST_ID,\r\n} from '@/components/SliderNavigate/constants';\r\nimport {NavigateButton} from '@/components/SliderNavigate/NavigateButton';\r\n\r\ndescribe('Slider Navigate component', () => {\r\n  afterEach(cleanup);\r\n  test('renders correctly', () => {\r\n    const {container} = render(<SliderNavigate />);\r\n    const sliderNavigateElement = screen.getByTestId(SLIDER_NAVIGATE_TEST_ID);\r\n    const buttonElements = screen.getAllByTestId(NAVIGATE_BUTTON_TEST_ID);\r\n    expect(buttonElements.length).toBe(Object.values(NAVIGATE_BUTTON_PLACEMENT).length);\r\n    expect(sliderNavigateElement).toBeInTheDocument();\r\n    expect(container).toMatchSnapshot();\r\n  });\r\n  test('renders no buttons if NAVIGATE_BUTTON_PLACEMENT is empty', () => {\r\n    jest.spyOn(Object, 'values').mockReturnValue([]);\r\n    const {container} = render(<SliderNavigate />);\r\n    const buttonElements = screen.queryAllByTestId(NAVIGATE_BUTTON_TEST_ID);\r\n\r\n    expect(buttonElements.length).toBe(0);\r\n    expect(container).toMatchSnapshot();\r\n  });\r\n});\r\n\r\ndescribe('Navigate Button component', () => {\r\n  const placements = Object.values(NAVIGATE_BUTTON_PLACEMENT);\r\n  placements.forEach((placement) => {\r\n    test(`renders correctly with ${placement} placement`, () => {\r\n      const {container} = render(<NavigateButton placement={placement} />);\r\n      const buttonElement = screen.getByTestId(NAVIGATE_BUTTON_TEST_ID);\r\n\r\n      expect(buttonElement).toBeInTheDocument();\r\n      expect(buttonElement).toHaveClass('slider-navigate__button');\r\n      expect(buttonElement.querySelector('svg')).toBeInTheDocument();\r\n      expect(container).toMatchSnapshot();\r\n    });\r\n  });\r\n});\r\n"],"names":["describe","afterEach","cleanup","test","container","render","jsx","SliderNavigate","sliderNavigateElement","screen","getByTestId","SLIDER_NAVIGATE_TEST_ID","buttonElements","getAllByTestId","NAVIGATE_BUTTON_TEST_ID","expect","length","toBe","Object","values","NAVIGATE_BUTTON_PLACEMENT","toBeInTheDocument","toMatchSnapshot","jest","spyOn","mockReturnValue","queryAllByTestId","forEach","placement","NavigateButton","buttonElement","toHaveClass","querySelector"],"mappings":";;;;;AASAA,SAAS,6BAA6B,MACpCC;AAAAA,YAAUC,CACVC,GAAAA,KAAK,qBAAqB,MAAA;AACxB,UAAMC,EAAAA,WAACA,EAAaC,IAAAA,EAAOC,EAACC,SACtBC,IAAwBC,EAAOC,YAAYC,CAAAA,GAC3CC,IAAiBH,EAAOI,eAAeC,CAAAA;AACtCC,WAAAH,EAAeI,MAAQC,EAAAA,KAAKC,OAAOC,OAAOC,CAA2BJ,EAAAA,MAAAA,GACrED,OAAAP,CAAAA,EAAuBa,kBACvBN,GAAAA,OAAAX,CAAWkB,EAAAA,gBAAAA;AAAAA,EAAgB,CAEpCnB,GAAAA,KAAK,4DAA4D,MAAA;AAC/DoB,SAAKC,MAAMN,QAAQ,QAAA,EAAUO,gBAAgB,CAAA,CAAA;AAC7C,UAAMrB,EAAAA,WAACA,EAAaC,IAAAA,EAAOC,EAACC,SACtBK,IAAiBH,EAAOiB,iBAAiBZ,CAAAA;AAE/CC,WAAOH,EAAeI,MAAQC,EAAAA,KAAK,CAC5BF,GAAAA,OAAAX,CAAWkB,EAAAA,gBAAAA;AAAAA,EAAgB,CACnC;AAAA,CAAA,GAGHtB,SAAS,6BAA6B,MACjBkB;AAAAA,SAAOC,OAAOC,CAAAA,EACtBO,QAASC,CAAAA,MAAAA;AACbzB,SAAA,0BAA0ByB,CAAuB,cAAA,MAAA;AACpD,YAAMxB,EAAAA,WAACA,EAAaC,IAAAA,EAAQC,EAAAuB,GAAA,EAAeD,WAAAA,EAAAA,CAAAA,CAAAA,GACrCE,IAAgBrB,EAAOC,YAAYI,CAAAA;AAElCC,aAAAe,CAAAA,EAAeT,kBACfN,GAAAA,OAAAe,CAAeC,EAAAA,YAAY,yBAClChB,GAAAA,OAAOe,EAAcE,cAAc,KAAQX,CAAAA,EAAAA,kBAAAA,GACpCN,OAAAX,CAAAA,EAAWkB,gBAAgB;AAAA,IAAA,CAAA;AAAA,EACnC,CACF;AAAA,CAAA;"}