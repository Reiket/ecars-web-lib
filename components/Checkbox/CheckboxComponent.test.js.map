{"version":3,"file":"CheckboxComponent.test.js","sources":["../../../lib/components/Checkbox/CheckboxComponent.test.tsx"],"sourcesContent":["import {fireEvent, render, screen} from '@testing-library/react';\nimport React from 'react';\nimport {Checkbox, CHECKBOX_TEST_ID, CHECKBOX_TEST_INPUT_ID} from '@/components/Checkbox/constants';\n\ndescribe('Checkbox component', () => {\n  const disabledOptions = [true, false];\n  const errorOptions = [true, false];\n  const checkedOptions = [true, false];\n  disabledOptions.forEach((disabled) => {\n    checkedOptions.forEach((checked) => {\n      errorOptions.forEach((error) => {\n        const disabledStatus = disabled ? 'is disabled' : 'is not disabled';\n        const checkedStatus = checked ? 'is checked' : 'is not checked';\n        const errorStatus = error ? 'has an error and input has an error class' : 'has no error';\n        const testName = `renders checkbox ${disabledStatus}, ${checkedStatus}, ${errorStatus}`;\n        test(testName, () => {\n          const props = {\n            checked: checked,\n            disabled: disabled,\n            hasError: error,\n          };\n          const {container} = render(<Checkbox {...props} />);\n          const checkboxElement = screen.getByTestId(CHECKBOX_TEST_ID);\n          const inputElement = screen.getByTestId(CHECKBOX_TEST_INPUT_ID) as HTMLInputElement;\n\n          if (error) {\n            expect(inputElement).toHaveClass('error');\n          }\n          expect(inputElement.checked).toBe(checked);\n          expect(inputElement.disabled).toBe(disabled);\n          expect(checkboxElement).toBeInTheDocument();\n          expect(container).toMatchSnapshot();\n        });\n      });\n    });\n  });\n  test('onChange event changed checked when user clicks on checkbox', () => {\n    const props = {\n      checked: false,\n      onChange: jest.fn(),\n    };\n    render(<Checkbox {...props} />);\n    const inputElement = screen.getByTestId(CHECKBOX_TEST_INPUT_ID) as HTMLInputElement;\n    expect(inputElement.checked).toBe(false);\n    fireEvent.change(inputElement, {target: {checked: true}});\n    expect(inputElement.checked).toBe(true);\n  });\n});\n"],"names":["describe","errorOptions","checkedOptions","forEach","disabled","checked","error","test","props","hasError","container","render","Checkbox","checkboxElement","screen","getByTestId","CHECKBOX_TEST_ID","inputElement","CHECKBOX_TEST_INPUT_ID","expect","toHaveClass","toBe","toBeInTheDocument","toMatchSnapshot","onChange","jest","fn","jsx","fireEvent","change","target"],"mappings":";;;AAIAA,SAAS,sBAAsB,MAAA;AACvB,QACAC,IAAe,CAAC,IAAA,EAChBC,GAAAA,IAAiB,CAAC,IAAA,EAFA;AAAA,GAAA,IAAO,EAAA,EAGfC,QAASC,CAAAA,MAAAA;AACRF,IAAAA,EAAAC,QAASE,CAAAA;AACTJ,MAAAA,EAAAE,QAASG,CAAAA,MAKpBC;AAAAA,aADiB,oBAHMH,IAAW,gBAAgB,iBAAA,KAC5BC,IAAU,eAAe,gBAC3BC,KAAAA,IAAQ,8CAA8C,cAAA,IAE3D,MACb;AAAA,gBAAME,IAAQ,EACZH,SAAAA,GACAD,UACAK,GAAAA,UAAUH,EAENI,GAAAA,EAAAA,WAACA,EAAaC,IAAAA,IAAQC,GAAU,EAAGJ,GAAAA,EAAAA,CAAAA,CAAAA,GACnCK,IAAkBC,EAAOC,YAAYC,CAAAA,GACrCC,IAAeH,EAAOC,YAAYG,CAEpCZ;AAAAA,UAAAA,KACKa,OAAAF,CAAAA,EAAcG,YAAY,OAAA,GAEnCD,OAAOF,EAAaZ,OAASgB,EAAAA,KAAKhB,CAClCc,GAAAA,OAAOF,EAAab,QAAAA,EAAUiB,KAAKjB,CAAAA,GAC5Be,OAAAN,CAAAA,EAAiBS,kBACjBH,GAAAA,OAAAT,CAAWa,EAAAA,gBAAAA;AAAAA,QAAgB,CACnC;AAAA,MAAA,CAAA;AAAA,IACF,CACF;AAAA,EAAA,CAAA,GAEHhB,KAAK,+DAA+D,MAClE;AAAA,UAAMC,IAAQ,EACZH,SAAAA,IACAmB,UAAUC,KAAKC,GAAAA,EAAAA;AAEjBf,IAAAA,EAAQgB,EAAAf,GAAA,EAAA,GAAaJ,EACf,CAAA,CAAA;AAAA,UAAAS,IAAeH,EAAOC,YAAYG,CAAAA;AACxCC,WAAOF,EAAaZ,OAAAA,EAASgB,KAAK,EAAA,GACxBO,EAAAC,OAAOZ,GAAc,EAACa,QAAQ,EAACzB,SAAS,GAAA,EAAA,CAAA,GAClDc,OAAOF,EAAaZ,OAASgB,EAAAA,KAAAA;EAAS,CACvC;AAAA,CAAA;"}