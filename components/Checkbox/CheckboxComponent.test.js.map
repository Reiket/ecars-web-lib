{"version":3,"file":"CheckboxComponent.test.js","sources":["../../../lib/components/Checkbox/CheckboxComponent.test.tsx"],"sourcesContent":["import {fireEvent, render, screen} from '@testing-library/react';\nimport React from 'react';\nimport {Checkbox, CHECKBOX_TEST_ID, CHECKBOX_TEST_INPUT_ID} from '@/components/Checkbox/constants';\n\ndescribe('Checkbox component', () => {\n  const disabledOptions = [true, false];\n  const errorOptions = [true, false];\n  const checkedOptions = [true, false];\n  disabledOptions.forEach((disabled) => {\n    checkedOptions.forEach((checked) => {\n      errorOptions.forEach((error) => {\n        const disabledStatus = disabled ? 'is disabled' : 'is not disabled';\n        const checkedStatus = checked ? 'is checked' : 'is not checked';\n        const errorStatus = error ? 'has an error and input has an error class' : 'has no error';\n        const testName = `renders checkbox ${disabledStatus}, ${checkedStatus}, ${errorStatus}`;\n        test(testName, () => {\n          const props = {\n            checked: checked,\n            disabled: disabled,\n            hasError: error,\n          };\n          const {container} = render(<Checkbox {...props} />);\n          const checkboxElement = screen.getByTestId(CHECKBOX_TEST_ID);\n          const inputElement: HTMLInputElement = screen.getByTestId(CHECKBOX_TEST_INPUT_ID);\n\n          if (error) {\n            expect(inputElement).toHaveClass('error');\n          }\n          expect(inputElement.checked).toBe(checked);\n          expect(inputElement.disabled).toBe(disabled);\n          expect(checkboxElement).toBeInTheDocument();\n          expect(container).toMatchSnapshot();\n        });\n      });\n    });\n  });\n  test('onChange event changed checked when user clicks on checkbox', () => {\n    const props = {\n      checked: false,\n      onChange: jest.fn(),\n    };\n    render(<Checkbox {...props} />);\n    const inputElement: HTMLInputElement = screen.getByTestId(CHECKBOX_TEST_INPUT_ID);\n    expect(inputElement.checked).toBe(false);\n    fireEvent.change(inputElement, {target: {checked: true}});\n    expect(inputElement.checked).toBe(true);\n  });\n});\n"],"names":["disabledOptions","errorOptions","checkedOptions","disabled","checked","error","testName","props","container","render","Checkbox","checkboxElement","screen","CHECKBOX_TEST_ID","inputElement","CHECKBOX_TEST_INPUT_ID","jsx","fireEvent"],"mappings":";;;AAIA,SAAS,sBAAsB,MAAM;AAC7B,QAAAA,IAAkB,CAAC,IAAM,EAAK,GAC9BC,IAAe,CAAC,IAAM,EAAK,GAC3BC,IAAiB,CAAC,IAAM,EAAK;AACnB,EAAAF,EAAA,QAAQ,CAACG,MAAa;AACrB,IAAAD,EAAA,QAAQ,CAACE,MAAY;AACrB,MAAAH,EAAA,QAAQ,CAACI,MAAU;AAI9B,cAAMC,IAAW,oBAHMH,IAAW,gBAAgB,iBAGC,KAF7BC,IAAU,eAAe,gBAEsB,KADjDC,IAAQ,8CAA8C,cACW;AACrF,aAAKC,GAAU,MAAM;AACnB,gBAAMC,IAAQ;AAAA,YACZ,SAAAH;AAAA,YACA,UAAAD;AAAA,YACA,UAAUE;AAAA,UACZ,GACM,EAAC,WAAAG,EAAa,IAAAC,oBAAQC,GAAU,EAAA,GAAGH,GAAO,CAAE,GAC5CI,IAAkBC,EAAO,YAAYC,CAAgB,GACrDC,IAAiCF,EAAO,YAAYG,CAAsB;AAEhF,UAAIV,KACK,OAAAS,CAAY,EAAE,YAAY,OAAO,GAE1C,OAAOA,EAAa,OAAO,EAAE,KAAKV,CAAO,GACzC,OAAOU,EAAa,QAAQ,EAAE,KAAKX,CAAQ,GACpC,OAAAQ,CAAe,EAAE,kBAAkB,GACnC,OAAAH,CAAS,EAAE,gBAAgB;AAAA,QAAA,CACnC;AAAA,MAAA,CACF;AAAA,IAAA,CACF;AAAA,EAAA,CACF,GACD,KAAK,+DAA+D,MAAM;AACxE,UAAMD,IAAQ;AAAA,MACZ,SAAS;AAAA,MACT,UAAU,KAAK,GAAG;AAAA,IACpB;AACA,IAAAE,EAAQ,gBAAAO,EAAAN,GAAA,EAAU,GAAGH,EAAO,CAAA,CAAE;AACxB,UAAAO,IAAiCF,EAAO,YAAYG,CAAsB;AAChF,WAAOD,EAAa,OAAO,EAAE,KAAK,EAAK,GAC7BG,EAAA,OAAOH,GAAc,EAAC,QAAQ,EAAC,SAAS,GAAA,GAAM,GACxD,OAAOA,EAAa,OAAO,EAAE,KAAK,EAAI;AAAA,EAAA,CACvC;AACH,CAAC;"}